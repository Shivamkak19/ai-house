/* import from google fonts */
@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');
*{
  margin:0;
  padding: 0;
  box-sizing: border-box;
}

html, body{
  font-family: "Montserrat", sans-serif;
  color: var(--text-black);
}

/* body{
  overflow: hidden;
} */

/* targets transitions for "all" attributes for each element type used. Customize transitions later if needed */
/* match with transition in lights (Environment.js) with duration/delay in GSAP, if needed */

/* Check if you can set a different speed for turning toggle on vs off */
h1,
section,
p,
span,
svg{
  /* transition: all 5s; */
  /* transition: background-color 0.5s, color 0.5s; // Use if "all" causes bugs with border-radius transition. I don't seem to have this problem, so will keep "all" for transitions for now */
}

:root{
  --text-black: rgb(47, 47, 47);
  --primary-color: #faf4e5;
  --color-pink: #e5a1aa;

  /* Light Themed Variables */

  --color-text-light: rgb(47, 47, 47);
  --color-background-light: rgba(250,244,229, .8);
  /* --color-background-light: rgba(72, 72, 72, .8); */
  --color-pink-light: #e5a1aa;
  --color-green-light: #7AD0AC;
  --color-blue-light: #8395CD;

  /* Dark Themed Variables */
  --color-text-dark: #FAF4e5;
  --color-background-dark: #8395CD;

}

.light-theme{
  --color-text: var(--color-text-light);
  --color-background: var(--color-background-light);
  --color-pink: var(--color-pink-light);
  --color-green: var(--color-green-light);
  --color-blue: var(--color-blue-light);
}

.dark-theme{
  /* All color texts are set to the same color in dark mode */
  --color-text: var(--color-text-dark);
  --color-background: var(--color-background-dark);
  --color-pink: var(--color-text-dark);
  --color-green: var(--color-text-dark);
  --color-blue: var(--color-text-dark);
}



/* Experience //////////////////////////////////////////// */

.experience{
  position: fixed;
  width: 100vw;
  height: 100vh;
}

.experience-canvas{
  width: 100%;
  height: 100%;
  /*touch-action: manipulation; */
}

.minecraft-wrapper{
  background-color: #bfd1e5;
  color: #61443e;
}

.minecraft-subwrapper{
  color: #a06851;
}

/* Preloader ///////////////////////////////////////// */

.hidden{
  display: none;
}

.preloader{
  background-color: var(--color-background-light);
  width: 100%;
  height: 100vh;
  position: fixed; /* keeps loader page fixed on screen */
  opacity: 1;
  z-index: 9999999999999999999999;
}

.preloader-wrapper{
  display: flex;
  justify-content: center; /* keeps centered without using margins */
  align-items: center;
  width: 100%;
  height: 100%;
}

.loading{
  display: flex;
  justify-content: center; 
  align-items: center;
}

.circle{
  width: 10px;
  height: 10px;
  border-radius: 50%;
  margin: 6px; /* otherwise circles are too close */
  background-color: var(--color-pink-light);
  animation: load 1s ease-in-out infinite;
}

/* Pseudo selector: selects the n-th child of the class ".circle" (3 children) */
/* Apply offset to each child of ".circle" to create wave effect */
.circle:nth-child(2){
  animation-delay: 0.1s;
}
.circle:nth-child(3){
  animation-delay: 0.2s;
}

/* Must set keyframes for CSS animation. "load" is animation name, then set what the element does in this animation w/ keyframes*/
@keyframes load {
  0%{
    transform: translateY(0);
  }

  20%{
    transform: translateY(-12px);
  }

  40%{
    transform: translateY(0);
  }

  /*If you use 0%, 20%, 40%, result is a continuous wave. 0%, 20%, 40% results in a stopping wave because keyframes reach completion at 40%, remain stagnant from 40% to 100% */
}

/* Main Page //////////////////////////////////////////// */

.page{
  z-index: 999999;
  width: 100%;
  height: 100vh;
  overflow: hidden;
}

.page-wrapper{
  position: relative;
}

/* Preloader Styles ///////////////////////////// */

.animated{
  display: inline-block; /* won't be able to move w/o this, default is "inline-element" */ 
  transform: translateY(100%);
}

.intro-text{
  display: flex;
  justify-content: center; 
  align-items: center;

  position: absolute;
  top: 50%;
  left: 50%;
  font-weight: 500;
  font-size: 16px;
  color: var(--color-text);
  transform: translate(-50%, -50%); /* the text, moves 50% of its height/width */
}

.arrow-svg-wrapper{
  position: absolute;
  top: 90%;
  left: 50%;
  opacity: 0; /* Sets initial state, set to opacity: 1 at end of intro1 animation */
  color: var(--color-text);
  transform: translate(-50%, -50%);  
  animation: bounce 0.5s ease-in alternate infinite; /* Animated arrow svg */
}

/* Sets keyframes for bounce animation with CSS only, no javascript */
@keyframes bounce {
  0%{
    transform: translateY(0);
  }

  100%{
    transform: translateY(8px);
  }
}

/* Main Page //////////////////////////////////////////// */

.toggle-bar{
  position: fixed;
  display: flex;

  opacity: 0; /* Sets initial state, set to opacity: 1 at end of intro1 animation */

  flex-direction: row;
  justify-content: center;
  align-items: center;
  top: 48px;
  right: 48px;
  z-index: 9999;
}

.sun-wrapper, 
.moon-wrapper{
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  color: var(--color-text);
  /* Must set <path fill = "currentColor" ........></path> in html for svg to accept colors */

}

.toggle-button{
  cursor: pointer;  /* creates the pointer effect on hover */ 
  position: relative;
  width: 56px;
  height: 28px;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: var(--color-pink);
  border-radius: 999px;
  margin: 0px 16px; /* 0 px top/bottom, 16px left/right */
  border: none;
  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px; /* google search good CSS box shadow, copied */
}

/* Creates toggle circle */
.toggle-circle{
  position: absolute;
  left: 6px;
  border-radius: 50%; /* makes circle shape */
  width: 20px;
  height: 20px;
  background-color: var(--color-background);
  transition: all 0.2s ease-in-out /* animates changes to the div, can use anywhere */
  
}

/* on hover for toggle-button div, changes style for toggle-circle div */
.toggle-button:hover .toggle-circle{
  transform: scale(0.9); /* Scales about center, as opposed to setting height/width from 20px to 16px, this scales about the left side */
}

.slide{
  /* transform: translateX(24px); didn't work, must set slide class to another layer of wrapping to use transform */
  /* Set the absolute position instead: */
  left: 28px;
}

/* Section Formatting //////////////////////////////////////////// */

.section-margin{
  height: 300px;
  width: 100%;
}

.section{
  position: relative;
  width: 50%;
  padding: 1000px 4%;
  margin: 0;
  background-color: var(--color-background);
  overflow: hidden;
}

.left{
  margin-right: auto;
  border-top-right-radius: 700px 700px;
  border-bottom-right-radius: 0px 0px;
}

.right{
  margin-left: auto;
  border-top-left-radius: 700px 700px;
  border-bottom-left-radius: 0px 0px;
}

/* Progress  Bar //////////////////////////// */
.progress-wrapper{
  height: 0px;
  width: 12px;
  z-index: 9999;
}

.progress-bar-wrapper-left{
  position: absolute;
  top: 0;
  left: 0;
}

.progress-bar-wrapper-right{
  position: absolute;
  top: 0;
  right: 0;
}

.progress-bar{
  height: 100vh;
  width: 100%;
  background-color: var(--color-pink);
  transform-origin: top center;
  transform: scaleY(1);
}

/* Sections ///////////////////////////////*/

.section-intro-wrapper{
  position: relative;
  padding: 20% 5%;
  border-bottom: 2px solid var(--color-pink);
  padding-bottom: 400px;
}

.section-detail-wrapper{
  position: relative;
  padding: 20% 5%;

}

.section-heading{
  font-size: 18px;
  font-weight: 700;
  line-height: 1.8;
  margin-top: 64px;
  color: var(--color-text);

}

.section-text{
  line-height: 2;
  margin-top: 18px;
  font-size: 16px;
  color: var(--color-text);

}

/* Text Decoration Section //////////////////////////////////////////// */

.section-title{
  position: relative;
  color: var(--color-pink)
}

.section-title-text{
  display: block; /* won't work without this */
  font-size: 40px;
  font-weight: 500;
  transform-origin: left; /* Sets origin point to the left of the span */
  transform: skewY(25deg); /* Skews span about the newly set origin point for rotated effect */
  z-index: 5;
  text-transform: uppercase;
  color: var(--color-pink);

}

.styleOne,
.styleTwo,
.styleThree{
  position: absolute;
  display: block;
  width: 100%;
  max-width: 278px;
  height: 60px;
  border: 1px solid var(--color-pink);
  transform-origin: left; 
  transform: skewY(-25deg); 
}

.styleOne{
  top: 0px;
}

.styleTwo{
  top: 80px;
}

.styleThree{
  top: 80px;
  transform: skewY(25deg);
  background-color: var(--color-pink)
}

/* By setting the position absolute, the number is locked to the parent container. 
Then, you can set the position (bottom and right set here) to fix the position 
of the number in the container, even as the container moves relatively to the page */

.section-number{
  position: absolute;
  bottom: 15px;
  right: 0;
  color: var(--color-pink);
  font-size: 24px;
}

/* Hero Section //////////////////////////////////////////// */

.hero{
  width: 100vw;
  height: 100vh;
}

.hero-wrapper{
  position: relative;
  height: 100%;
  width: calc(100% - 160px);
  margin: 0 auto;
  max-width: 1100px;
}

.hero-main{
  position: absolute;
  bottom: 128px; /* 168 original */
  left: 0;
  color: var(--color-text);

}

.hero-second{
  position: absolute;
  top: calc(50% - 120px);
  right: 0;
  color: var(--color-text);

}

.hero-main-title{
  font-size: 90px;
  color: var(--color-text);
  text-align: center;

}

.hero-main-description{
  padding-top: 12px;
  font-size: 24px;
  color: var(--color-text);
  text-align: center;

}

.hero-second-subheading{
  font-size: 32px;
  text-transform: uppercase; 
  color: var(--color-text);

}

/* Other Colors Override */

.blue-text{
  color: var(--color-blue);
}

.blue-border{
  border-color: var(--color-blue);
}

.blue-background{
  background-color: var(--color-blue);
}

.green-text{
  color: var(--color-green);
}

.green-border{
  border-color: var(--color-green);
}

.green-background{
  background-color: var(--color-green);
}

/* Media Queries, makes the site mobile responsive */ 

@media (max-width: 968px){
  .section{
    width: 100%;
  }

  .progress-bar-wrapper-left{
    right: 0;
    left: auto; /* overrides the left margin setting when shifted to mobile */ 
  }

  .hero-second{
    top: 160px;
  }
  .hero-main{
    bottom: 120px;
  }
  .hero-wrapper{
    width: calc(100%- 60px);
  }
  .hero-main-title{
    font-size: 32px;
  }
  .hero-main-description{
    font-size: 18px;
  }
  .hero-second-subheading{
    font-size: 18px;
  }

}